def print_board(board):
  """Prints the current state of the tic-tac-toe board."""
  for row in board:
    print(" | ".join(row))
  print("-" * 9)

def check_win(board, player):
  """Checks if the specified player has won the game."""
  # Check rows
  for row in board:
    if all(cell == player for cell in row):
      return True
  # Check columns
  for col in range(3):
    if all(board[row][col] == player for row in range(3)):
      return True
  # Check diagonals
  if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
      return True
  return False

def is_board_full(board):
  """Checks if the board is full."""
  return all(all(cell != " " for cell in row) for row in board)

def play_tic_tac_toe():
  """Plays a tic-tac-toe game."""
  board = [[" ", " ", " "], [" ", " ", " "], [" ", " ", " "]]
  players = ["X", "O"]
  current_player = 0

  while True:
    print_board(board)
    row = int(input(f"Player {players[current_player]}, enter the row (0-2): "))
    col = int(input(f"Player {players[current_player]}, enter the column (0-2): "))

    if board[row][col] != " ":
      print("Invalid move. Try again.")
      continue

    board[row][col] = players[current_player]

    if check_win(board, players[current_player]):
      print_board(board)
      print(f"Player {players[current_player]} wins!")
      break
    elif is_board_full(board):
      print_board(board)
      print("It's a tie!")
      break

    current_player = (current_player + 1) % 2

if __name__ == "__main__":
  play_tic_tac_toe()
